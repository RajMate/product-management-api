name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_DEFAULT_REGION: us-east-1
  ECR_REPOSITORY: dev-user-app-repo
  ECS_CLUSTER: product-management-cluster
  ECS_SERVICE_DEV: product-management-service-dev
  ECS_SERVICE_PROD: product-management-service-prod
  ECS_TASK_DEFINITION_DEV: product-management-task
  ECS_TASK_DEFINITION_PROD: product-management-task-prod
  TARGET_GROUP_ARN: arn:aws:elasticloadbalancing:us-east-1:294895595987:targetgroup/product-management-tg-dev/1234567890abcdef
  PROD_TARGET_GROUP_ARN: arn:aws:elasticloadbalancing:us-east-1:294895595987:targetgroup/product-management-tg-prod/abcdef1234567890
  SUBNET_ID_1: subnet-12345678
  SUBNET_ID_2: subnet-87654321
  SECURITY_GROUP_ID: sg-abcdef123456
  IMAGE_TAG: ${{ github.sha }}

jobs:
  secret_scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      run: |
        # Install TruffleHog
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
        
        # Run TruffleHog with verified secrets only
        trufflehog git file://. --only-verified --fail

  code_quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  image_build_and_scan:
    runs-on: ubuntu-latest
    needs: [secret_scan, code_quality]
    permissions:
      id-token: write
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        load: true
        tags: product-management:${{ env.IMAGE_TAG }}

    - name: Run Trivy vulnerability scanner (local image)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: product-management:${{ env.IMAGE_TAG }}
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Run Trivy vulnerability scanner (SARIF)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: product-management:${{ env.IMAGE_TAG }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Tag and push image to Amazon ECR (after scan)
      run: |
        docker tag product-management:${{ env.IMAGE_TAG }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

  deploy_dev:
    runs-on: ubuntu-latest
    needs: [image_build_and_scan]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::294895595987:role/github-role-niki
          role-session-name: GitHubActionsDeployDevSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Fill in the new image ID in the task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: product-management-container
          image: ${{ steps.login-ecr.outputs.registry }}/dev-user-app-repo:${{ env.IMAGE_TAG }}
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_DEV }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Verify deployment
        run: |
          echo "Verifying deployment status..."
          aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE_DEV }} --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}' --output table

  deploy_prod:
    runs-on: ubuntu-latest
    needs: [deploy_dev]
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::294895595987:role/github-role-niki
          role-session-name: GitHubActionsDeployProdSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Fill in the new image ID in the task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-prod.json
          container-name: product-management-container
          image: ${{ steps.login-ecr.outputs.registry }}/dev-user-app-repo:${{ env.IMAGE_TAG }}
      - name: Deploy to Amazon ECS (Production)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_PROD }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
      - name: Verify production deployment
        run: |
          echo "Verifying production deployment status..."
          aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE_PROD }} --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}' --output table