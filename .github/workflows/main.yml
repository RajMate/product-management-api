name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Pipeline configuration variables
  IMAGE_TAG: ${{ github.sha }}
  
  # AWS Configuration - Set these in GitHub repository secrets
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  
  # ECS Resources - Set these in GitHub repository secrets
  ECR_REPOSITORY: dev-user-app-repo
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE_DEV: ${{ secrets.ECS_SERVICE_DEV }}
  ECS_SERVICE_PROD: ${{ secrets.ECS_SERVICE_PROD }}
  ECS_TASK_DEFINITION_DEV: ${{ secrets.ECS_TASK_DEFINITION_DEV }}
  ECS_TASK_DEFINITION_PROD: ${{ secrets.ECS_TASK_DEFINITION_PROD }}
  
  # Database Configuration - Set these in GitHub repository secrets
  DB_HOST_DEV: ${{ secrets.DB_HOST_DEV }}
  DB_HOST_PROD: ${{ secrets.DB_HOST_PROD }}
  DB_PASSWORD_DEV: ${{ secrets.DB_PASSWORD_DEV }}
  DB_PASSWORD_PROD: ${{ secrets.DB_PASSWORD_PROD }}
  
  # Load Balancer Configuration - Set these in GitHub repository secrets
  TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}
  PROD_TARGET_GROUP_ARN: ${{ secrets.PROD_TARGET_GROUP_ARN }}
  
  # Network Configuration - Set these in GitHub repository secrets
  SUBNET_ID_1: ${{ secrets.SUBNET_ID_1 }}
  SUBNET_ID_2: ${{ secrets.SUBNET_ID_2 }}
  SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}

jobs:
  secret_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install detect-secrets
      - name: Run secret scan
        run: |
          detect-secrets scan --baseline .secrets.baseline

  unit_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov httpx
      - name: Run unit tests
        run: |
          # Directory already exists, no need to create it
          pytest src/unittest/python --junitxml=junit-report.xml
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: junit-report.xml
        if: always()

  code_coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov httpx
      - name: Run code coverage
        run: |
          pytest src/unittest/python --cov=src/main/python --cov-report=xml --cov-report=html
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/

  # Commenting out static_analysis job as requested - will be updated later
  # static_analysis:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.9'
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pylint mypy
  #     - name: Run static analysis
  #       run: |
  #         pylint src/
  #         mypy src/

  security_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Run Bandit
        run: |
          bandit -r src/main/python -f json -o bandit-report.json || true
          bandit -r src/main/python -f html -o bandit-report.html || true
          
          # Create a readable HTML report
          echo "<html><head><title>Bandit Security Analysis</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .issue { border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; border-radius: 5px; }
            .high { border-left: 5px solid #d9534f; }
            .medium { border-left: 5px solid #f0ad4e; }
            .low { border-left: 5px solid #5bc0de; }
          </style></head><body>
          <h1>Bandit Security Analysis Report</h1>" > bandit-report-summary.html
          
          python -c "import json
          try:
              with open('bandit-report.json', 'r') as f:
                  data = json.load(f)
                  
              results = data.get('results', [])
              if not results:
                  print('<h2>No security issues found</h2>')
              else:
                  print(f'<h2>Found {len(results)} potential security issues</h2>')
                  
              for issue in results:
                  severity = issue.get('issue_severity', 'low').lower()
                  print(f'<div class=\"issue {severity}\">')
                  print(f'<h3>{issue.get(\"test_name\")}: {issue.get(\"issue_text\")}</h3>')
                  print(f'<p><strong>Severity:</strong> {severity.capitalize()}</p>')
                  print(f'<p><strong>Confidence:</strong> {issue.get(\"issue_confidence\", \"\").capitalize()}</p>')
                  print(f'<p><strong>File:</strong> {issue.get(\"filename\")}:{issue.get(\"line_number\")}</p>')
                  print(f'<p><strong>Code:</strong> <pre>{issue.get(\"code\", \"\")}</pre></p>')
                  print(f'<p><strong>More Info:</strong> {issue[\"more_info\"]}</p></div>')
          except Exception as e:
              print(f'<h2>Error processing report: {e}</h2>')
          " >> bandit-report-summary.html || echo "<h2>No security issues found</h2>" >> bandit-report-summary.html
          
          echo "</body></html>" >> bandit-report-summary.html
      - name: Run Safety
        run: |
          safety check -r requirements.txt --json > safety-report.json || true
          safety check -r requirements.txt --output text > safety-report.txt || true
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            bandit-report.html
            bandit-report-summary.html
            safety-report.json
            safety-report.txt

  dockerfile_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: json
          output-file: hadolint-basic-report.json
          failure-threshold: error
          no-fail: true
      - name: Run advanced Hadolint scan
        run: |
          docker run --rm -i -v "$(pwd)":/app:ro hadolint/hadolint:latest-debian < Dockerfile > hadolint-advanced-report.json || true
      - name: Generate HTML report
        run: |
          echo "<html><head><title>Dockerfile Analysis</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .issue { margin-bottom: 20px; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
            .error { border-left: 5px solid #d9534f; }
            .warning { border-left: 5px solid #f0ad4e; }
            .info { border-left: 5px solid #5bc0de; }
            h1 { color: #333; }
            h2 { color: #666; }
          </style></head><body>
          <h1>Dockerfile Analysis Report</h1>" > dockerfile-report.html
          
          if [ -s hadolint-basic-report.json ]; then
            echo "<h2>Basic Scan Results</h2>" >> dockerfile-report.html
            jq -r '.[] | "<div class=\"issue " + (.level | ascii_downcase) + "\"><h3>" + .code + ": " + .message + "</h3><p>Line: " + (.line | tostring) + "</p><p>Level: " + .level + "</p></div>"' hadolint-basic-report.json >> dockerfile-report.html || echo "<p>Error processing basic report</p>" >> dockerfile-report.html
          else
            echo "<h2>Basic Scan: No issues found</h2>" >> dockerfile-report.html
          fi
          
          if [ -s hadolint-advanced-report.json ]; then
            echo "<h2>Advanced Scan Results</h2>" >> dockerfile-report.html
            cat hadolint-advanced-report.json >> dockerfile-report.html
          else
            echo "<h2>Advanced Scan: No issues found</h2>" >> dockerfile-report.html
          fi
          
          echo "</body></html>" >> dockerfile-report.html
      - name: Upload dockerfile reports
        uses: actions/upload-artifact@v4
        with:
          name: dockerfile-reports
          path: |
            hadolint-basic-report.json
            hadolint-advanced-report.json
            dockerfile-report.html

  aws_auth:
    runs-on: ubuntu-latest
    # Add permissions required for OIDC
    permissions:
      id-token: write  # This is required for requesting the JWT
      contents: read   # This is required for actions/checkout
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::294895595987:role/github-role-niki
          role-session-name: GitHubActionsSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Verify AWS authentication
        run: |
          aws sts get-caller-identity

  image_build:
    runs-on: ubuntu-latest
    needs: [aws_auth, dockerfile_scan]
    # Add permissions required for OIDC
    permissions:
      id-token: write  # This is required for requesting the JWT
      contents: read   # This is required for actions/checkout
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::294895595987:role/github-role-niki
          role-session-name: GitHubActionsSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: product-management:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          # Tag the local image with the ECR repository
          docker tag product-management:$IMAGE_TAG $ECR_REGISTRY/dev-user-app-repo:$IMAGE_TAG
          docker tag product-management:$IMAGE_TAG $ECR_REGISTRY/dev-user-app-repo:latest
          
          # Push the image to ECR
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/dev-user-app-repo:$IMAGE_TAG
          docker push $ECR_REGISTRY/dev-user-app-repo:latest
          echo "::set-output name=ecr-image::$ECR_REGISTRY/dev-user-app-repo:$IMAGE_TAG"
      - name: Save Docker image
        run: |
          docker save product-management:${{ env.IMAGE_TAG }} -o product-management-image.tar
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: product-management-image.tar

  image_scan:
    runs-on: ubuntu-latest
    needs: [image_build]
    # Add permissions for SARIF upload
    permissions:
      security-events: write  # Required for SARIF upload
      contents: read          # Required for actions/checkout
    steps:
      - uses: actions/checkout@v4
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      - name: Load Docker image
        run: |
          docker load -i product-management-image.tar
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: product-management:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail on vulnerabilities
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy Container Scan'

  deploy_dev:
    runs-on: ubuntu-latest
    needs: [image_scan]
    # Add permissions required for OIDC
    permissions:
      id-token: write  # This is required for requesting the JWT
      contents: read   # This is required for actions/checkout
    environment:
      name: development
      url: http://dev.product-management-api.example.com
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::294895595987:role/github-role-niki
          role-session-name: GitHubActionsDeploySession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Fill in the new image ID in the task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: product-management-container
          image: ${{ steps.login-ecr.outputs.registry }}/dev-user-app-repo:${{ env.IMAGE_TAG }}
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_DEV }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy_prod:
    runs-on: ubuntu-latest
    needs: [deploy_dev]
    # Add permissions required for OIDC
    permissions:
      id-token: write  # This is required for requesting the JWT
      contents: read   # This is required for actions/checkout
    environment:
      name: production
      url: http://product-management-api.example.com
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::294895595987:role/github-role-niki
          role-session-name: GitHubActionsDeployProdSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Fill in the new image ID in the task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-prod.json
          container-name: product-management-container
          image: ${{ steps.login-ecr.outputs.registry }}/dev-user-app-repo:${{ env.IMAGE_TAG }}
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_PROD }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true