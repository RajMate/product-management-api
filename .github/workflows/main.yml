name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Pipeline configuration variables
  IMAGE_TAG: ${{ github.sha }}
  
  # AWS Configuration - Set these in GitHub repository secrets
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  
  # ECS Resources - Set these in GitHub repository secrets
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE_DEV: ${{ secrets.ECS_SERVICE_DEV }}
  ECS_SERVICE_PROD: ${{ secrets.ECS_SERVICE_PROD }}
  ECS_TASK_DEFINITION_DEV: ${{ secrets.ECS_TASK_DEFINITION_DEV }}
  ECS_TASK_DEFINITION_PROD: ${{ secrets.ECS_TASK_DEFINITION_PROD }}
  
  # Database Configuration - Set these in GitHub repository secrets
  DB_HOST_DEV: ${{ secrets.DB_HOST_DEV }}
  DB_HOST_PROD: ${{ secrets.DB_HOST_PROD }}
  DB_PASSWORD_DEV: ${{ secrets.DB_PASSWORD_DEV }}
  DB_PASSWORD_PROD: ${{ secrets.DB_PASSWORD_PROD }}
  
  # Load Balancer Configuration - Set these in GitHub repository secrets
  TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}
  PROD_TARGET_GROUP_ARN: ${{ secrets.PROD_TARGET_GROUP_ARN }}
  
  # Network Configuration - Set these in GitHub repository secrets
  SUBNET_ID_1: ${{ secrets.SUBNET_ID_1 }}
  SUBNET_ID_2: ${{ secrets.SUBNET_ID_2 }}
  SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}

jobs:
  secret_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install detect-secrets
      - name: Run secret scan
        run: |
          detect-secrets scan --baseline .secrets.baseline

  unit_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov httpx
      - name: Run unit tests
        run: |
          mkdir -p src/unittest/python
          pytest src/unittest/python --junitxml=junit-report.xml
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: junit-report.xml
        if: always()

  code_coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov httpx
      - name: Run code coverage
        run: |
          pytest --cov=src/main/python --cov-report=xml
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  static_analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint
      - name: Run flake8
        run: |
          flake8 src/main/python
      - name: Run pylint
        run: |
          pylint src/main/python || true

  security_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Run Bandit
        run: |
          bandit -r src/main/python -f json -o bandit-report.json || true
      - name: Generate HTML report
        run: |
          echo "<html><head><title>Bandit Security Analysis</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .issue { margin-bottom: 20px; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
            .HIGH { border-left: 5px solid #d9534f; }
            .MEDIUM { border-left: 5px solid #f0ad4e; }
            .LOW { border-left: 5px solid #5bc0de; }
            h1 { color: #333; }
            h2 { color: #666; }
          </style></head><body>
          <h1>Bandit Security Analysis Report</h1>" > bandit-report.html
          
          python -c "
          import json
          try:
              with open('bandit-report.json', 'r') as f:
                  data = json.load(f)
              
              results = data.get('results', [])
              if results:
                  for issue in results:
                      severity = issue['issue_severity']
                      confidence = issue['issue_confidence']
                      test_id = issue['test_id']
                      test_name = issue['test_name']
                      filename = issue['filename']
                      line_number = issue['line_number']
                      code = issue['code']
                      more_info = issue['more_info']
                      
                      print(f'<div class=\"issue {severity}\"><h3>{test_name} ({test_id})</h3><p><strong>Severity:</strong> {severity} <strong>Confidence:</strong> {confidence}</p><p><strong>File:</strong> {filename}</p><p><strong>Line:</strong> {line_number}</p><pre>{code}</pre><p><strong>More Info:</strong> {more_info}</p></div>')" >> bandit-report.html || echo "<h2>No security issues found</h2>" >> bandit-report.html
          
          echo "</body></html>" >> bandit-report.html
      - name: Run safety check
        run: |
          safety check -r requirements.txt --json > safety-report.json || true
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            bandit-report.html
            safety-report.json

  dockerfile_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: json
          output-file: hadolint-basic-report.json
      - name: Run hadolint with custom rules
        run: |
          wget -q https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint-Linux-x86_64
          ./hadolint-Linux-x86_64 --config .hadolint.yaml Dockerfile --format json > hadolint-advanced-report.json || true
      - name: Generate HTML report
        run: |
          apt-get update && apt-get install -y jq
          
          echo "<html><head><title>Dockerfile Analysis</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .issue { margin-bottom: 20px; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
            .error { border-left: 5px solid #d9534f; }
            .warning { border-left: 5px solid #f0ad4e; }
            .info { border-left: 5px solid #5bc0de; }
            h1 { color: #333; }
            h2 { color: #666; }
          </style></head><body>
          <h1>Dockerfile Analysis Report</h1>" > dockerfile-report.html
          
          CRITICAL_ISSUES=$(jq '[.[] | select(.level == "error")] | length' hadolint-basic-report.json)
          echo "<p>Found $CRITICAL_ISSUES critical issues</p>" >> dockerfile-report.html
          
          jq -c '.[]' hadolint-basic-report.json | while read -r issue; do
            level=$(echo $issue | jq -r '.level')
            code=$(echo $issue | jq -r '.code')
            message=$(echo $issue | jq -r '.message')
            line=$(echo $issue | jq -r '.line')
            column=$(echo $issue | jq -r '.column')
            
            echo "<div class=\"issue $level\">
            <h3>$code</h3>
            <p><strong>Level:</strong> $level</p>
            <p><strong>Message:</strong> $message</p>
            <p><strong>Location:</strong> Line $line, Column $column</p>
            </div>" >> dockerfile-report.html
          done
          
          echo "</body></html>" >> dockerfile-report.html
          
          if [ "$CRITICAL_ISSUES" -gt 3 ]; then
            echo "Too many critical Dockerfile issues found: $CRITICAL_ISSUES"
            echo "Please fix the issues before proceeding"
            exit 1
          fi
      - name: Upload dockerfile reports
        uses: actions/upload-artifact@v3
        with:
          name: dockerfile-reports
          path: |
            hadolint-basic-report.json
            hadolint-advanced-report.json
            dockerfile-report.html

  build:
    runs-on: ubuntu-latest
    needs: [unit_test, code_coverage, static_analysis, security_scan, dockerfile_scan]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pybuilder
          pip install -r requirements.txt
      - name: Build with PyBuilder
        run: |
          python -m pybuilder.cli publish
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: target/dist/*

  image_build:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: product-management:${{ env.IMAGE_TAG }}
          load: true
      - name: Save Docker image
        run: |
          docker save product-management:${{ env.IMAGE_TAG }} -o product-management-image.tar
      - name: Upload Docker image
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: product-management-image.tar

  image_scan:
    runs-on: ubuntu-latest
    needs: [image_build]
    steps:
      - uses: actions/checkout@v3
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
      - name: Load Docker image
        run: |
          docker load -i product-management-image.tar
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: product-management:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Simplified deployment jobs for GitHub Actions
  deploy_dev:
    runs-on: ubuntu-latest
    needs: [image_scan]
    environment:
      name: development
      url: http://dev.product-management-api.example.com
    steps:
      - uses: actions/checkout@v3
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
      - name: Load Docker image
        run: |
          docker load -i product-management-image.tar
      - name: Deploy to development
        run: |
          echo "Deploying to development environment"
          # In a real scenario, you would push to ECR and update ECS here
          echo "Deployment successful"

  deploy_prod:
    runs-on: ubuntu-latest
    needs: [deploy_dev]
    environment:
      name: production
      url: http://product-management-api.example.com
    steps:
      - uses: actions/checkout@v3
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
      - name: Load Docker image
        run: |
          docker load -i product-management-image.tar
      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # In a real scenario, you would push to ECR and update ECS here
          echo "Deployment successful"