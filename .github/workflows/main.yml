name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Build environment
  IMAGE_TAG: ${{ github.sha }}
  BUILD_NUMBER: ${{ github.run_number }}
  BUILD_TIMESTAMP: ${{ github.run_id }}
  
  # AWS Configuration
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  
  # ECR and ECS Configuration
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE_DEV: ${{ secrets.ECS_SERVICE_DEV }}
  ECS_SERVICE_PROD: ${{ secrets.ECS_SERVICE_PROD }}
  ECS_TASK_DEFINITION_DEV: ${{ secrets.ECS_TASK_DEFINITION_DEV }}
  ECS_TASK_DEFINITION_PROD: ${{ secrets.ECS_TASK_DEFINITION_PROD }}
  
  # Database Configuration
  DB_HOST_DEV: ${{ secrets.DB_HOST_DEV }}
  DB_HOST_PROD: ${{ secrets.DB_HOST_PROD }}
  DB_PASSWORD_DEV: ${{ secrets.DB_PASSWORD_DEV }}
  DB_PASSWORD_PROD: ${{ secrets.DB_PASSWORD_PROD }}
  
  # Network Configuration
  TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}
  PROD_TARGET_GROUP_ARN: ${{ secrets.PROD_TARGET_GROUP_ARN }}
  
  # Network IDs
  SUBNET_ID_1: ${{ secrets.SUBNET_ID_1 }}
  SUBNET_ID_2: ${{ secrets.SUBNET_ID_2 }}
  SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}

jobs:
  secret_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for TruffleHog
      - name: Run Trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          # Scan filesystem instead of git diff to avoid BASE/HEAD same commit error
          extra_args: --debug --only-verified --no-git

  unit_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          python -m pytest tests/ -v --tb=short

  code_coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest-cov
      - name: Run tests with coverage
        run: |
          python -m pytest tests/ --cov=app --cov-report=xml --cov-report=html
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/

  security_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety
      - name: Run Bandit security scan
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  aws_auth:
    runs-on: ubuntu-latest
    # Add permissions required for OIDC
    permissions:
      id-token: write  # This is required for requesting the JWT
      contents: read   # This is required for actions/checkout
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::294895595987:role/github-role-niki
          role-session-name: GitHubActionsAuthSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Test AWS authentication
        run: |
          aws sts get-caller-identity
          echo "AWS authentication successful!"

  image_build:
    runs-on: ubuntu-latest
    needs: [secret_scan, unit_test, code_coverage, security_scan, aws_auth]
    # Add permissions required for OIDC
    permissions:
      id-token: write  # This is required for requesting the JWT
      contents: read   # This is required for actions/checkout
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.generate-tags.outputs.all-tags }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::294895595987:role/github-role-niki
          role-session-name: GitHubActionsBuildSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          echo "Building Docker image..."
          docker build -t product-management:$IMAGE_TAG .
          echo "Docker image built successfully!"
      - name: Generate unique image tags
        id: generate-tags
        run: |
          # Generate timestamp in UTC
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          
          # Create multiple unique tags
          COMMIT_TAG="commit-${{ env.IMAGE_TAG }}"
          BUILD_TAG="build-${{ env.BUILD_NUMBER }}"
          TIMESTAMP_TAG="ts-${TIMESTAMP}"
          VERSION_TAG="v1.0.${{ env.BUILD_NUMBER }}"
          
          echo "commit-tag=${COMMIT_TAG}" >> $GITHUB_OUTPUT
          echo "build-tag=${BUILD_TAG}" >> $GITHUB_OUTPUT
          echo "timestamp-tag=${TIMESTAMP_TAG}" >> $GITHUB_OUTPUT
          echo "version-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "latest-tag=latest" >> $GITHUB_OUTPUT
          
          echo "Generated tags:"
          echo "  - ${COMMIT_TAG}"
          echo "  - ${BUILD_TAG}"
          echo "  - ${TIMESTAMP_TAG}"
          echo "  - ${VERSION_TAG}"
          echo "  - latest"
      - name: Tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          # Tag the local image with multiple unique tags
          docker tag product-management:$IMAGE_TAG $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.commit-tag }}
          docker tag product-management:$IMAGE_TAG $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.build-tag }}
          docker tag product-management:$IMAGE_TAG $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.timestamp-tag }}
          docker tag product-management:$IMAGE_TAG $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.version-tag }}
          docker tag product-management:$IMAGE_TAG $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.latest-tag }}
          
          # Push all tags to ECR
          echo "Pushing images with multiple tags to ECR..."
          docker push $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.commit-tag }}
          docker push $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.build-tag }}
          docker push $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.timestamp-tag }}
          docker push $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.version-tag }}
          docker push $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.latest-tag }}
          
          echo "All images pushed successfully to ECR!"
          echo "Images available with tags:"
          echo "  - $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.commit-tag }}"
          echo "  - $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.build-tag }}"
          echo "  - $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.timestamp-tag }}"
          echo "  - $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.version-tag }}"
          echo "  - $ECR_REGISTRY/dev-user-app-repo:${{ steps.generate-tags.outputs.latest-tag }}"
      - name: Save Docker image
        run: |
          docker save product-management:${{ env.IMAGE_TAG }} | gzip > product-management-image.tar.gz
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: product-management-image.tar.gz
          retention-days: 1

  image_scan:
    runs-on: ubuntu-latest
    needs: [image_build]
    # Add permissions required for OIDC
    permissions:
      id-token: write  # This is required for requesting the JWT
      contents: read   # This is required for actions/checkout
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::294895595987:role/github-role-niki
          role-session-name: GitHubActionsScanSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/dev-user-app-repo:v1.0.${{ env.BUILD_NUMBER }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif

  deploy_dev:
    runs-on: ubuntu-latest
    needs: [image_build, image_scan]
    # Add permissions required for OIDC
    permissions:
      id-token: write  # This is required for requesting the JWT
      contents: read   # This is required for actions/checkout
    environment:
      name: development
      url: http://dev-product-management-api.example.com
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::294895595987:role/github-role-niki
          role-session-name: GitHubActionsDeploySession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Fill in the new image ID in the task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: product-management-container
          image: ${{ steps.login-ecr.outputs.registry }}/dev-user-app-repo:v1.0.${{ env.BUILD_NUMBER }}
      - name: Check ECS service status
        run: |
          echo "Checking ECS service status..."
          aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE_DEV }} || echo "Service not found or inactive"
          
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_DEV }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false
          force-new-deployment: true

  deploy_prod:
    runs-on: ubuntu-latest
    needs: [deploy_dev]
    # Add permissions required for OIDC
    permissions:
      id-token: write  # This is required for requesting the JWT
      contents: read   # This is required for actions/checkout
    environment:
      name: production
      url: http://product-management-api.example.com
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::294895595987:role/github-role-niki
          role-session-name: GitHubActionsDeployProdSession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Fill in the new image ID in the task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-prod.json
          container-name: product-management-container
          image: ${{ steps.login-ecr.outputs.registry }}/dev-user-app-repo:v1.0.${{ env.BUILD_NUMBER }}
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_PROD }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true